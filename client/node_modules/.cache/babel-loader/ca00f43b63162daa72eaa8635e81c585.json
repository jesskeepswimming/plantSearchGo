{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jessi\\\\OneDrive\\\\Documents\\\\GitHub\\\\plantSearchGo\\\\client\\\\src\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from \"react-mapbox-gl\";\nimport svg from \"./logo.svg\";\nimport * as MapboxGL from 'mapbox-gl'; // tslint:disable-next-line:no-var-requires\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  token,\n  styles\n} = require('./config.json');\n\nconst Map = ReactMapboxGl({\n  accessToken: token\n});\n_c = Map;\nconst mapStyle = {\n  flex: 1,\n  height: 500\n};\nconst paintLayer = {\n  'fill-extrusion-color': '#aaa',\n  'fill-extrusion-height': {\n    type: 'identity',\n    property: 'height'\n  },\n  'fill-extrusion-base': {\n    type: 'identity',\n    property: 'min_height'\n  },\n  'fill-extrusion-opacity': 0.6\n}; // export interface Props {\n//   // tslint:disable-next-line:no-any\n//   onStyleLoad?: (map: any) => any;\n// }\n// Create an image for the Layer\n\nconst image = new Image(); // image.src = 'data:image/svg+xml;charset=utf-8;base64,'+btoa(svg)\n\nimage.src = 'https://image.flaticon.com/icons/png/512/149/149059.png';\nconst images = ['pin', image];\nconst symbolLayout = {\n  'text-field': '{place}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top'\n};\nconst symbolPaint = {\n  'text-color': 'white'\n};\nconst circleLayout = {\n  visibility: 'visible'\n};\nconst circlePaint = {\n  'circle-color': 'white'\n};\n\nconst getStations = () => {\n  return {\n    \"a\": {\n      \"position\": [-80.544861, 43.472286]\n    },\n    \"b\": {\n      \"position\": [43.472286, -80.544861]\n    }\n  };\n};\n\nconst geojson = {\n  type: 'FeatureCollection',\n  features: [{\n    type: 'Feature',\n    geometry: {\n      type: 'Point',\n      coordinates: [-80.544861, 43.472286]\n    }\n  }, {\n    type: 'Feature',\n    geometry: {\n      type: 'Point',\n      coordinates: [43.472286, -80.544861]\n    }\n  }]\n};\n\nfunction ThreeDMap(props) {\n  _s();\n\n  const [fitBounds, setFitBounds] = useState(undefined);\n  const [center, setCenter] = useState([-80.544861, 43.472286]);\n  const [zoom, setZoom] = useState([50]);\n  const [bearing, setBearing] = useState([-60]);\n  const [pitch, setPitch] = useState([80]);\n  const [station, setStation] = useState(undefined);\n  const [stations, setStations] = useState({}); // Define layout to use in Layer component\n\n  const layoutLayer = {\n    'icon-image': 'pin'\n  };\n  useEffect(() => {\n    var k = getStations();\n    setStations(k);\n  }, []); // onStyleLoad = (map) => {\n  //   // const onStyleLoad = props.onStyleLoad;\n  //   return props.onStyleLoad && props.onStyleLoad(map);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Map, {\n      style: \"mapbox://styles/mapbox/streets-v8\",\n      containerStyle: mapStyle,\n      onStyleLoad: props.onStyleLoad,\n      zoom: zoom,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      children: [/*#__PURE__*/_jsxDEV(GeoJSONLayer, {\n        data: geojson,\n        circleLayout: circleLayout,\n        circlePaint: circlePaint,\n        circleOnClick: () => console.log('click'),\n        symbolLayout: symbolLayout,\n        symbolPaint: symbolPaint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Layer, {\n        id: \"3d-buildings\",\n        sourceId: \"composite\",\n        sourceLayer: \"building\",\n        filter: ['==', 'extrude', 'true'],\n        type: \"fill-extrusion\",\n        minZoom: 14,\n        paint: paintLayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Icons made by \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://www.flaticon.com/authors/smashicons\",\n        title: \"Smashicons\",\n        children: \"Smashicons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 26\n      }, this), \" from \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://www.flaticon.com/\",\n        title: \"Flaticon\",\n        children: \"www.flaticon.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ThreeDMap, \"+cN85inJnu0UgAvYT46TpyLqMS8=\");\n\n_c2 = ThreeDMap;\nexport default ThreeDMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"ThreeDMap\");","map":{"version":3,"sources":["C:/Users/jessi/OneDrive/Documents/GitHub/plantSearchGo/client/src/Map.js"],"names":["React","useState","useEffect","ReactMapboxGl","Layer","Feature","GeoJSONLayer","MapboxGL","token","styles","require","Map","accessToken","mapStyle","flex","height","paintLayer","type","property","image","Image","src","images","symbolLayout","symbolPaint","circleLayout","visibility","circlePaint","getStations","geojson","features","geometry","coordinates","ThreeDMap","props","fitBounds","setFitBounds","undefined","center","setCenter","zoom","setZoom","bearing","setBearing","pitch","setPitch","station","setStation","stations","setStations","layoutLayer","k","onStyleLoad","console","log"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport ReactMapboxGl, {Layer, Feature, GeoJSONLayer} from \"react-mapbox-gl\";\nimport svg from './logo.svg'\nimport * as MapboxGL from 'mapbox-gl'\n// tslint:disable-next-line:no-var-requires\nconst { token, styles } = require('./config.json');\n\nconst Map = ReactMapboxGl({ accessToken: token });\n\nconst mapStyle = {\n  flex: 1,\n  height: 500\n};\n\nconst paintLayer = {\n  'fill-extrusion-color': '#aaa',\n  'fill-extrusion-height': {\n    type: 'identity',\n    property: 'height'\n  },\n  'fill-extrusion-base': {\n    type: 'identity',\n    property: 'min_height'\n  },\n  'fill-extrusion-opacity': 0.6\n};\n\n// export interface Props {\n//   // tslint:disable-next-line:no-any\n//   onStyleLoad?: (map: any) => any;\n// }\n\n\n\n\n// Create an image for the Layer\nconst image = new Image();\n// image.src = 'data:image/svg+xml;charset=utf-8;base64,'+btoa(svg)\nimage.src = 'https://image.flaticon.com/icons/png/512/149/149059.png'\nconst images = ['pin', image]\n\n\nconst symbolLayout = {\n  'text-field': '{place}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top'\n};\nconst symbolPaint = {\n  'text-color': 'white'\n};\n\nconst circleLayout = { visibility: 'visible'}\nconst circlePaint = {\n  'circle-color': 'white'\n}\nconst getStations = () =>{\n  return {\n    \"a\": {\n      \"position\": [-80.544861, 43.472286]\n    },\n    \"b\": {\n      \"position\": [43.472286, -80.544861]\n    },\n  }\n}\nconst geojson = {\n  type: 'FeatureCollection',\n  features: [\n    {type: 'Feature', geometry: {type: 'Point', coordinates: [-80.544861, 43.472286]}},\n    {type: 'Feature', geometry: {type: 'Point', coordinates: [43.472286, -80.544861]}}\n  ]\n};\n\nfunction ThreeDMap(props) {\n\n  const [fitBounds, setFitBounds] = useState(undefined);\n  const [center, setCenter] = useState([-80.544861, 43.472286]);\n  const [zoom, setZoom] = useState([50]);\n  const [bearing, setBearing] = useState([-60]);\n  const [pitch, setPitch] = useState([80]);\n  const [station, setStation] = useState(undefined);\n  const [stations, setStations] = useState({});\n\n  \n  // Define layout to use in Layer component\n  const layoutLayer = { 'icon-image': 'pin' };\n\n  useEffect(()=> {\n\n    \n    var k = getStations();\n    setStations(k)\n\n  }, []);\n\n  // onStyleLoad = (map) => {\n  //   // const onStyleLoad = props.onStyleLoad;\n  //   return props.onStyleLoad && props.onStyleLoad(map);\n  // };\n\n\n    return (\n      <div>\n      <Map\n        style=\"mapbox://styles/mapbox/streets-v8\"\n        containerStyle={mapStyle}\n        onStyleLoad={props.onStyleLoad}\n        zoom={zoom}\n        center={center}\n        pitch={pitch}\n        bearing={bearing}\n      >\n        <GeoJSONLayer\n          data = {geojson}\n          circleLayout={circleLayout}\n          circlePaint={circlePaint}\n          circleOnClick={()=> console.log('click')}\n          symbolLayout={symbolLayout}\n          symbolPaint={symbolPaint}\n        />\n        <Layer\n          id=\"3d-buildings\"\n          sourceId=\"composite\"\n          sourceLayer=\"building\"\n          filter={['==', 'extrude', 'true']}\n          type=\"fill-extrusion\"\n          minZoom={14}\n          paint={paintLayer}\n        >\n          \n          </Layer>\n        \n       \n      \n      \n      </Map>\n\n      <div>Icons made by <a href=\"https://www.flaticon.com/authors/smashicons\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n      </div>\n    );\n\n}\n\nexport default ThreeDMap;"]},"metadata":{},"sourceType":"module"}