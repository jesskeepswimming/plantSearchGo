{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jessi\\\\OneDrive\\\\Documents\\\\GitHub\\\\plantSearchGo\\\\client\\\\src\\\\MyMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from \"react-mapbox-gl\"; // tslint:disable-next-line:no-var-requires\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  token,\n  styles\n} = require('./config.json');\n\nconst geojson = {\n  type: \"FeatureCollection\",\n  features: [{\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: [-80.544861, 43.472286]\n    }\n  }, {\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: [-80.538930, 43.462650]\n    }\n  }]\n};\nconst Map = ReactMapboxGl({\n  accessToken: token\n});\n_c = Map;\nconst mapStyle = {\n  flex: 1,\n  height: 500\n};\nconst paintLayer = {\n  'fill-extrusion-color': '#aaa',\n  'fill-extrusion-height': {\n    type: 'identity',\n    property: 'height'\n  },\n  'fill-extrusion-base': {\n    type: 'identity',\n    property: 'min_height'\n  },\n  'fill-extrusion-opacity': 0.6\n}; // export interface Props {\n//   // tslint:disable-next-line:no-any\n//   onStyleLoad?: (map: any) => any;\n// }\n// Create an image for the Layer\n\nconst image = new Image(); // image.src = 'data:image/svg+xml;charset=utf-8;base64,'+btoa(svg)\n\nimage.src = 'https://image.flaticon.com/icons/png/512/149/149059.png';\nconst images = ['pin', image];\nconst symbolLayout = {\n  'text-field': '{place}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top'\n};\nconst symbolPaint = {\n  'text-color': 'white'\n};\nconst circleLayout = {\n  visibility: 'visible'\n};\nconst circlePaint = {\n  'circle-color': 'white'\n};\n\nconst getStations = () => {\n  return {\n    \"a\": {\n      \"position\": [-80.544861, 43.472286]\n    },\n    \"b\": {\n      \"position\": [43.472286, -80.544861]\n    }\n  };\n};\n\nfunction ThreeDMap(props) {\n  _s();\n\n  const [fitBounds, setFitBounds] = useState(undefined);\n  const [center, setCenter] = useState([-80.544861, 43.472286]);\n  const [zoom, setZoom] = useState([50]);\n  const [bearing, setBearing] = useState([-60]);\n  const [pitch, setPitch] = useState([80]);\n  const [station, setStation] = useState(undefined);\n  const [stations, setStations] = useState({}); // Define layout to use in Layer component\n\n  const layoutLayer = {\n    'icon-image': 'pin'\n  };\n  useEffect(() => {}, []);\n\n  const onStyleLoad = (map, loadEvent) => {\n    console.log(map);\n    var k = getStations();\n    setStations(k); // return props.onStyleLoad && props.onStyleLoad(map);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Map, {\n    style: \"mapbox://styles/mapbox/streets-v8\",\n    containerStyle: mapStyle,\n    onStyleLoad: onStyleLoad,\n    zoom: zoom,\n    center: center,\n    pitch: pitch,\n    bearing: bearing,\n    renderChildrenInPortal: true,\n    children: [/*#__PURE__*/_jsxDEV(GeoJSONLayer, {\n      id: \"geojson\",\n      data: geojson,\n      circleLayout: circleLayout,\n      circlePaint: circlePaint,\n      circleOnClick: () => console.log('click'),\n      symbolLayout: symbolLayout,\n      symbolPaint: symbolPaint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layer, {\n      id: \"3d-buildings\",\n      sourceId: \"composite\",\n      sourceLayer: \"building\",\n      filter: ['==', 'extrude', 'true'],\n      type: \"fill-extrusion\",\n      minZoom: 14,\n      paint: paintLayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ThreeDMap, \"+cN85inJnu0UgAvYT46TpyLqMS8=\");\n\n_c2 = ThreeDMap;\nexport default ThreeDMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"ThreeDMap\");","map":{"version":3,"sources":["C:/Users/jessi/OneDrive/Documents/GitHub/plantSearchGo/client/src/MyMap.js"],"names":["React","useState","useEffect","ReactMapboxGl","Layer","Feature","GeoJSONLayer","token","styles","require","geojson","type","features","geometry","coordinates","Map","accessToken","mapStyle","flex","height","paintLayer","property","image","Image","src","images","symbolLayout","symbolPaint","circleLayout","visibility","circlePaint","getStations","ThreeDMap","props","fitBounds","setFitBounds","undefined","center","setCenter","zoom","setZoom","bearing","setBearing","pitch","setPitch","station","setStation","stations","setStations","layoutLayer","onStyleLoad","map","loadEvent","console","log","k"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport ReactMapboxGl, {Layer, Feature, GeoJSONLayer} from \"react-mapbox-gl\";\n// tslint:disable-next-line:no-var-requires\nconst { token, styles } = require('./config.json');\nconst geojson = {\n  type: \"FeatureCollection\",\n  features: [\n    {type: \"Feature\", geometry: {type: \"Point\", coordinates: [-80.544861, 43.472286]}},\n    {type: \"Feature\", geometry: {type: \"Point\", coordinates: [-80.538930, 43.462650]}}\n  ]\n}\n\n\nconst Map = ReactMapboxGl({ accessToken: token });\n\nconst mapStyle = {\n  flex: 1,\n  height: 500\n};\n\nconst paintLayer = {\n  'fill-extrusion-color': '#aaa',\n  'fill-extrusion-height': {\n    type: 'identity',\n    property: 'height'\n  },\n  'fill-extrusion-base': {\n    type: 'identity',\n    property: 'min_height'\n  },\n  'fill-extrusion-opacity': 0.6\n};\n\n// export interface Props {\n//   // tslint:disable-next-line:no-any\n//   onStyleLoad?: (map: any) => any;\n// }\n\n\n\n\n// Create an image for the Layer\nconst image = new Image();\n// image.src = 'data:image/svg+xml;charset=utf-8;base64,'+btoa(svg)\nimage.src = 'https://image.flaticon.com/icons/png/512/149/149059.png'\nconst images = ['pin', image]\n\n\nconst symbolLayout = {\n  'text-field': '{place}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top'\n};\nconst symbolPaint = {\n  'text-color': 'white'\n};\n\nconst circleLayout = { visibility: 'visible'}\nconst circlePaint = {\n  'circle-color': 'white'\n}\nconst getStations = () =>{\n  return {\n    \"a\": {\n      \"position\": [-80.544861, 43.472286]\n    },\n    \"b\": {\n      \"position\": [43.472286, -80.544861]\n    },\n  }\n}\n\n\nfunction ThreeDMap(props) {\n\n  const [fitBounds, setFitBounds] = useState(undefined);\n  const [center, setCenter] = useState([-80.544861, 43.472286]);\n  const [zoom, setZoom] = useState([50]);\n  const [bearing, setBearing] = useState([-60]);\n  const [pitch, setPitch] = useState([80]);\n  const [station, setStation] = useState(undefined);\n  const [stations, setStations] = useState({});\n\n  \n  // Define layout to use in Layer component\n  const layoutLayer = { 'icon-image': 'pin' };\n\n    useEffect(()=> {\n\n        \n    }, []);\n\n    const onStyleLoad = (map, loadEvent) => {\n        console.log(map);\n        var k = getStations();\n        setStations(k)\n        // return props.onStyleLoad && props.onStyleLoad(map);\n    };\n\n\n    return (\n      <Map\n        style=\"mapbox://styles/mapbox/streets-v8\"\n        containerStyle={mapStyle}\n        onStyleLoad={onStyleLoad}\n        zoom={zoom}\n        center={center}\n        pitch={pitch}\n        bearing={bearing}\n        renderChildrenInPortal={true}\n      >\n          {/* <Layer type='circle' layout={{'visibility': 'visible'}} paint={{'circle-color':'black'}}>\n              {stations ? Object.keys(stations).map((k, index)=> {\n                  console.log(k, stations[k].position)\n                  return <Feature\n                    key = {k}\n                    coordinates = {stations[k].position}\n                  />\n            }): ''}\n          </Layer> */}\n        <GeoJSONLayer\n          id='geojson'\n          data = {geojson}\n          circleLayout={circleLayout}\n          circlePaint={circlePaint}\n          circleOnClick={()=> console.log('click')}\n          symbolLayout={symbolLayout}\n          symbolPaint={symbolPaint}\n        />\n        <Layer\n          id=\"3d-buildings\"\n          sourceId=\"composite\"\n          sourceLayer=\"building\"\n          filter={['==', 'extrude', 'true']}\n          type=\"fill-extrusion\"\n          minZoom={14}\n          paint={paintLayer}\n        >\n          \n          </Layer>\n        \n       \n      \n      \n     </Map>\n        \n    );\n\n}\n\nexport default ThreeDMap;"]},"metadata":{},"sourceType":"module"}