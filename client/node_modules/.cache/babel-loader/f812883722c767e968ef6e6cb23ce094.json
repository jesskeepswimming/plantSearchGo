{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jessi\\\\OneDrive\\\\Documents\\\\GitHub\\\\plantSearchGo\\\\client\\\\src\\\\MyMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from \"react-mapbox-gl\";\nimport { svg } from \"./pin.svg\"; // tslint:disable-next-line:no-var-requires\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  token,\n  styles\n} = require('./config.json');\n\nconst geojson = {\n  'type': 'geojson',\n  'data': {\n    type: \"FeatureCollection\",\n    features: [{\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [-80.544861, 43.472286]\n      }\n    }, {\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [-80.538930, 43.462650]\n      }\n    }, {\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [43.472286, -80.544861]\n      }\n    }]\n  }\n};\nconst Map = ReactMapboxGl({\n  accessToken: token\n});\n_c = Map;\nconst mapStyle = {\n  flex: 1,\n  height: 500\n};\nconst paintLayer = {\n  'fill-extrusion-color': '#aaa',\n  'fill-extrusion-height': {\n    type: 'identity',\n    property: 'height'\n  },\n  'fill-extrusion-base': {\n    type: 'identity',\n    property: 'min_height'\n  },\n  'fill-extrusion-opacity': 0.6\n}; // export interface Props {\n//   // tslint:disable-next-line:no-any\n//   onStyleLoad?: (map: any) => any;\n// }\n\nconst symbolLayout = {\n  'text-field': '{place}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top'\n};\nconst symbolPaint = {\n  'text-color': 'white'\n};\nconst circleLayout = {\n  'visibility': 'visible'\n};\nconst circlePaint = {\n  'circle-color': 'white'\n};\n\nconst getStations = () => {\n  return {\n    \"a\": {\n      \"position\": [-80.544861, 43.472286]\n    },\n    \"b\": {\n      \"position\": [43.472286, -80.544861]\n    }\n  };\n};\n\nfunction ThreeDMap(props) {\n  _s();\n\n  const [fitBounds, setFitBounds] = useState(undefined);\n  const [center, setCenter] = useState([-80.544861, 43.472286]);\n  const [zoom, setZoom] = useState([50]);\n  const [bearing, setBearing] = useState([-60]);\n  const [pitch, setPitch] = useState([80]);\n  const [station, setStation] = useState(undefined);\n  const [stations, setStations] = useState({});\n  const [images, setImages] = useState([]); // Define layout to use in Layer component\n\n  const layoutLayer = {\n    'icon-image': 'pin'\n  };\n  useEffect(() => {}, [stations]);\n\n  const onStyleLoad = (map, loadEvent) => {\n    // Create an image for the Layer\n    const image = new Image(); // image.src = 'data:image/svg+xml;charset=utf-8;base64,' + btoa(svg);\n\n    image.src = './pin.svg';\n    setImages(['pin', image]);\n    console.log(map);\n    var k = getStations();\n    setStations(k);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Map, {\n    style: \"mapbox://styles/mapbox/streets-v8\",\n    containerStyle: mapStyle,\n    onStyleLoad: onStyleLoad,\n    zoom: zoom,\n    center: center,\n    pitch: pitch,\n    bearing: bearing,\n    renderChildrenInPortal: true,\n    children: [/*#__PURE__*/_jsxDEV(Layer, {\n      type: \"symbol\",\n      id: \"marker\",\n      layout: layoutLayer,\n      images: images,\n      children: stations ? Object.keys(stations).map((k, index) => {\n        console.log(k, stations[k].position);\n        return /*#__PURE__*/_jsxDEV(Feature, {\n          coordinates: stations[k].position\n        }, k, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 26\n        }, this);\n      }) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Layer, {\n      id: \"3d-buildings\",\n      sourceId: \"composite\",\n      sourceLayer: \"building\",\n      filter: ['==', 'extrude', 'true'],\n      type: \"fill-extrusion\",\n      minZoom: 14,\n      paint: paintLayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ThreeDMap, \"9DMtpe18pIVEISx3X2lEzpW75y8=\");\n\n_c2 = ThreeDMap;\nexport default ThreeDMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"ThreeDMap\");","map":{"version":3,"sources":["C:/Users/jessi/OneDrive/Documents/GitHub/plantSearchGo/client/src/MyMap.js"],"names":["React","useState","useEffect","ReactMapboxGl","Layer","Feature","GeoJSONLayer","token","styles","require","geojson","type","features","geometry","coordinates","Map","accessToken","mapStyle","flex","height","paintLayer","property","symbolLayout","symbolPaint","circleLayout","circlePaint","getStations","ThreeDMap","props","fitBounds","setFitBounds","undefined","center","setCenter","zoom","setZoom","bearing","setBearing","pitch","setPitch","station","setStation","stations","setStations","images","setImages","layoutLayer","onStyleLoad","map","loadEvent","image","Image","src","console","log","k","Object","keys","index","position"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport ReactMapboxGl, {Layer, Feature, GeoJSONLayer} from \"react-mapbox-gl\";\nimport {svg} from './pin.svg'\n\n// tslint:disable-next-line:no-var-requires\nconst { token, styles } = require('./config.json');\nconst geojson = {\n    'type': 'geojson',\n    'data': {\n        type: \"FeatureCollection\",\n        features: [\n            {type: \"Feature\", geometry: {type: \"Point\", coordinates: [-80.544861, 43.472286]}},\n            {type: \"Feature\", geometry: {type: \"Point\", coordinates: [-80.538930, 43.462650]}},\n            {type: \"Feature\", geometry: {type: \"Point\", coordinates: [43.472286, -80.544861]}},\n        ]\n    }\n \n}\n\n\nconst Map = ReactMapboxGl({ accessToken: token });\n\nconst mapStyle = {\n  flex: 1,\n  height: 500\n};\n\nconst paintLayer = {\n  'fill-extrusion-color': '#aaa',\n  'fill-extrusion-height': {\n    type: 'identity',\n    property: 'height'\n  },\n  'fill-extrusion-base': {\n    type: 'identity',\n    property: 'min_height'\n  },\n  'fill-extrusion-opacity': 0.6\n};\n\n// export interface Props {\n//   // tslint:disable-next-line:no-any\n//   onStyleLoad?: (map: any) => any;\n// }\n\n\n\n\n\n\nconst symbolLayout = {\n  'text-field': '{place}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top'\n};\nconst symbolPaint = {\n  'text-color': 'white'\n};\n\nconst circleLayout = { 'visibility': 'visible'}\nconst circlePaint = {\n  'circle-color': 'white'\n}\nconst getStations = () =>{\n  return {\n    \"a\": {\n      \"position\": [-80.544861, 43.472286]\n    },\n    \"b\": {\n      \"position\": [43.472286, -80.544861]\n    },\n  }\n}\n\n\nfunction ThreeDMap(props) {\n\n  const [fitBounds, setFitBounds] = useState(undefined);\n  const [center, setCenter] = useState([-80.544861, 43.472286]);\n  const [zoom, setZoom] = useState([50]);\n  const [bearing, setBearing] = useState([-60]);\n  const [pitch, setPitch] = useState([80]);\n  const [station, setStation] = useState(undefined);\n  const [stations, setStations] = useState({});\n  const [images, setImages] = useState([])\n  \n  // Define layout to use in Layer component\n  const layoutLayer = { 'icon-image': 'pin' };\n\n    useEffect(()=> {\n\n        \n    }, [stations]);\n\n    const onStyleLoad = (map, loadEvent) => {\n        // Create an image for the Layer\n        const image = new Image();\n        // image.src = 'data:image/svg+xml;charset=utf-8;base64,' + btoa(svg);\n        image.src = './pin.svg'\n        setImages(['pin', image])\n\n        console.log(map);\n        var k = getStations();\n        setStations(k)\n\n    };\n\n\n    return (\n      <Map\n        style=\"mapbox://styles/mapbox/streets-v8\"\n        containerStyle={mapStyle}\n        onStyleLoad={onStyleLoad}\n        zoom={zoom}\n        center={center}\n        pitch={pitch}\n        bearing={bearing}\n        renderChildrenInPortal={true}\n      >\n          <Layer type='symbol' id='marker' layout={layoutLayer} images={images}>\n              {stations ? Object.keys(stations).map((k, index)=> {\n                  console.log(k, stations[k].position)\n                  return <Feature\n                    key = {k}\n                    coordinates = {stations[k].position}\n                  />\n            }): ''}\n          </Layer>\n      \n        <Layer\n          id=\"3d-buildings\"\n          sourceId=\"composite\"\n          sourceLayer=\"building\"\n          filter={['==', 'extrude', 'true']}\n          type=\"fill-extrusion\"\n          minZoom={14}\n          paint={paintLayer}\n        >\n          \n        </Layer>\n        \n       \n      \n      \n     </Map>\n        \n    );\n\n}\n\nexport default ThreeDMap;"]},"metadata":{},"sourceType":"module"}