{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jessi\\\\OneDrive\\\\Documents\\\\GitHub\\\\plantSearchGo\\\\client\\\\src\\\\PinPlants.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { SERVER } from \"./config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 500,\n    height: 450\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)'\n  }\n}));\nexport function TitlebarGridList(props) {\n  _s();\n\n  const itemData = props.itemData;\n  const {\n    image,\n    variety,\n    plant,\n    plant_id,\n    user_id,\n    for_sale\n  } = props.plant;\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(GridList, {\n      cellHeight: 300,\n      className: classes.gridList,\n      cols: 1,\n      children: [/*#__PURE__*/_jsxDEV(GridListTile, {\n        cols: 1,\n        style: {\n          height: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(ListSubheader, {\n          component: \"div\",\n          children: [variety, \" by \", user_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)\n      }, \"Subheader\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), itemData.map(tile => /*#__PURE__*/_jsxDEV(GridListTile, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: tile.image,\n          alt: tile.caption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n          title: tile.stage //{<Typography variant=\"subtitle1\">{tile.stage}</Typography>}\n          ,\n          subtitle: tile.caption + \" - \" + tile.date_posted // {\n          //     <div>\n          //         <Typography variant=\"caption\" >{tile.caption}</Typography>\n          //         <Typography fontStyle=\"italic\"> {tile.date_posted}</Typography>\n          //     </div>\n          // }\n          ,\n          actionIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": `info about ${tile.caption}`,\n            className: classes.icon,\n            children: /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, tile.post_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n}\n\n_s(TitlebarGridList, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = TitlebarGridList;\n\nconst styles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst DialogTitle = withStyles(styles)(props => {\n  const {\n    children,\n    classes,\n    onClose,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MuiDialogTitle, {\n    disableTypography: true,\n    className: classes.root,\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), onClose ? /*#__PURE__*/_jsxDEV(IconButton, {\n      \"aria-label\": \"close\",\n      className: classes.closeButton,\n      onClick: onClose,\n      children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n});\nconst DialogContent = withStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}))(MuiDialogContent);\nconst DialogActions = withStyles(theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1)\n  }\n}))(MuiDialogActions);\nexport default function PinPlants(props) {\n  _s2();\n\n  // const card = props.card\n  const {\n    isOpen,\n    pin_id,\n    handleClose\n  } = props;\n  const [open, setOpen] = React.useState(false);\n  const [itemData, setItemData] = React.useState([]);\n\n  const onFetchData = async e => {\n    // e.preventDefault();\n    try {\n      // const response = await fetch(`http://${SERVER}/posts/${plant_id}`)\n      // const jsonData = await response.json()\n      const jsonData = {\n        \"a\": 1\n      };\n      console.log(jsonData);\n      setItemData(jsonData);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      setOpen(true);\n    }\n  }, [isOpen, pin_id]); // const handleClickOpen = () => {\n  //     onFetchData()\n  //     console.log(image, variety, plant, plant_id, user_id, for_sale)\n  //     setOpen(true);\n  // };\n\n  const handleExit = () => {\n    setOpen(false);\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      onClose: handleExit,\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: open,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"customized-dialog-title\",\n        onClose: handleExit,\n        children: pin_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: \" Message Seller\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 7\n  }, this);\n}\n\n_s2(PinPlants, \"NjY0MgsRkiQRBaEIxEc3sjfym/0=\");\n\n_c2 = PinPlants;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TitlebarGridList\");\n$RefreshReg$(_c2, \"PinPlants\");","map":{"version":3,"sources":["C:/Users/jessi/OneDrive/Documents/GitHub/plantSearchGo/client/src/PinPlants.js"],"names":["React","useEffect","withStyles","makeStyles","Button","Dialog","MuiDialogTitle","MuiDialogContent","MuiDialogActions","IconButton","CloseIcon","Typography","GridList","GridListTile","GridListTileBar","ListSubheader","FavoriteIcon","SERVER","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","TitlebarGridList","props","itemData","image","variety","plant","plant_id","user_id","for_sale","classes","map","tile","caption","stage","date_posted","post_id","styles","margin","padding","spacing","closeButton","position","right","top","grey","DialogTitle","children","onClose","other","DialogContent","DialogActions","PinPlants","isOpen","pin_id","handleClose","open","setOpen","useState","setItemData","onFetchData","e","jsonData","console","log","err","message","handleExit"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,0BAAvC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,SAAQC,MAAR,QAAsB,UAAtB;;AAEA,MAAMC,SAAS,GAAGf,UAAU,CAAEgB,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,cAAc,EAAE,cAHZ;AAIJC,IAAAA,QAAQ,EAAE,QAJN;AAKJC,IAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC;AALtC,GAD+B;AAQrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,GADC;AAERC,IAAAA,MAAM,EAAE;AAFA,GAR2B;AAYrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH;AAZ+B,CAAZ,CAAD,CAA5B;AAiBE,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AACtC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AACA,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA,QAAxB;AAAkCC,IAAAA,OAAlC;AAA2CC,IAAAA;AAA3C,MAAuDP,KAAK,CAACI,KAAnE;AAEA,QAAMI,OAAO,GAAGzB,SAAS,EAAzB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEyB,OAAO,CAACvB,IAAxB;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,UAAU,EAAE,GAAtB;AAA2B,MAAA,SAAS,EAAEuB,OAAO,CAACd,QAA9C;AAAwD,MAAA,IAAI,EAAI,CAAhE;AAAA,8BACE,QAAC,YAAD;AAA8B,QAAA,IAAI,EAAE,CAApC;AAAuC,QAAA,KAAK,EAAE;AAAEE,UAAAA,MAAM,EAAE;AAAV,SAA9C;AAAA,+BACF,QAAC,aAAD;AAAe,UAAA,SAAS,EAAC,KAAzB;AAAA,qBAAgCO,OAAhC,UAA6CG,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AADE,SAAkB,WAAlB;AAAA;AAAA;AAAA;AAAA,cADF,EAIGL,QAAQ,CAACQ,GAAT,CAAcC,IAAD,iBACZ,QAAC,YAAD;AAAA,gCACE;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACR,KAAf;AAAsB,UAAA,GAAG,EAAEQ,IAAI,CAACC;AAAhC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,eAAD;AACE,UAAA,KAAK,EAAED,IAAI,CAACE,KADd,CAEE;AAFF;AAGE,UAAA,QAAQ,EAAIF,IAAI,CAACC,OAAL,GAAe,KAAf,GAAuBD,IAAI,CAACG,WAH1C,CAIE;AACA;AACA;AACA;AACA;AACA;AATF;AAUE,UAAA,UAAU,eACR,QAAC,UAAD;AAAY,0BAAa,cAAaH,IAAI,CAACC,OAAQ,EAAnD;AAAsD,YAAA,SAAS,EAAEH,OAAO,CAACX,IAAzE;AAAA,mCACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAmBa,IAAI,CAACI,OAAxB;AAAA;AAAA;AAAA;AAAA,cADD,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;GApCef,gB;UAIEhB,S;;;KAJFgB,gB;;AAsClB,MAAMgB,MAAM,GAAI/B,KAAD,KAAY;AACvBC,EAAAA,IAAI,EAAE;AACJ+B,IAAAA,MAAM,EAAE,CADJ;AAEJC,IAAAA,OAAO,EAAEjC,KAAK,CAACkC,OAAN,CAAc,CAAd;AAFL,GADiB;AAKvBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE,UADC;AAEXC,IAAAA,KAAK,EAAErC,KAAK,CAACkC,OAAN,CAAc,CAAd,CAFI;AAGXI,IAAAA,GAAG,EAAEtC,KAAK,CAACkC,OAAN,CAAc,CAAd,CAHM;AAIXpB,IAAAA,KAAK,EAAEd,KAAK,CAACO,OAAN,CAAcgC,IAAd,CAAmB,GAAnB;AAJI;AALU,CAAZ,CAAf;;AAaE,MAAMC,WAAW,GAAGzD,UAAU,CAACgD,MAAD,CAAV,CAAoBf,KAAD,IAAW;AAChD,QAAM;AAAEyB,IAAAA,QAAF;AAAYjB,IAAAA,OAAZ;AAAqBkB,IAAAA,OAArB;AAA8B,OAAGC;AAAjC,MAA2C3B,KAAjD;AACA,sBACE,QAAC,cAAD;AAAgB,IAAA,iBAAiB,MAAjC;AAAkC,IAAA,SAAS,EAAEQ,OAAO,CAACvB,IAArD;AAAA,OAA+D0C,KAA/D;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA,gBAA0BF;AAA1B;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,OAAO,gBACN,QAAC,UAAD;AAAY,oBAAW,OAAvB;AAA+B,MAAA,SAAS,EAAElB,OAAO,CAACW,WAAlD;AAA+D,MAAA,OAAO,EAAEO,OAAxE;AAAA,6BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADM,GAIJ,IANN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAZmB,CAApB;AAcA,MAAME,aAAa,GAAG7D,UAAU,CAAEiB,KAAD,KAAY;AAC3CC,EAAAA,IAAI,EAAE;AACJgC,IAAAA,OAAO,EAAEjC,KAAK,CAACkC,OAAN,CAAc,CAAd;AADL;AADqC,CAAZ,CAAD,CAAV,CAIlB9C,gBAJkB,CAAtB;AAMA,MAAMyD,aAAa,GAAG9D,UAAU,CAAEiB,KAAD,KAAY;AAC3CC,EAAAA,IAAI,EAAE;AACJ+B,IAAAA,MAAM,EAAE,CADJ;AAEJC,IAAAA,OAAO,EAAEjC,KAAK,CAACkC,OAAN,CAAc,CAAd;AAFL;AADqC,CAAZ,CAAD,CAAV,CAKlB7C,gBALkB,CAAtB;AAOF,eAAe,SAASyD,SAAT,CAAmB9B,KAAnB,EAA0B;AAAA;;AACrC;AACA,QAAM;AAAC+B,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAAgCjC,KAAtC;AACA,QAAM,CAACkC,IAAD,EAAOC,OAAP,IAAkBtE,KAAK,CAACuE,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAAEnC,QAAF,EAAYoC,WAAZ,IAA4BxE,KAAK,CAACuE,QAAN,CAAe,EAAf,CAAlC;;AAGA,QAAME,WAAW,GAAG,MAAMC,CAAN,IAAW;AAE3B;AACA,QAAI;AACJ;AACI;AACA,YAAMC,QAAQ,GAAG;AAAC,aAAI;AAAL,OAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,WAAW,CAACG,QAAD,CAAX;AACH,KAND,CAME,OAAOG,GAAP,EAAY;AACVF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACC,OAAhB;AACH;AACJ,GAZD;;AAcA9E,EAAAA,SAAS,CAAC,MAAK;AACX,QAAIiE,MAAJ,EAAW;AACPI,MAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,GAJQ,EAIN,CAACJ,MAAD,EAASC,MAAT,CAJM,CAAT,CArBqC,CA2BrC;AACA;AACA;AACA;AACA;;AAGA,QAAMa,UAAU,GAAG,MAAM;AACvBV,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAF,IAAAA,WAAW;AAEZ,GAJD;;AAMA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEY,UAAjB;AAA6B,yBAAgB,yBAA7C;AAAuE,MAAA,IAAI,EAAEX,IAA7E;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,EAAE,EAAC,yBAAhB;AAA0C,QAAA,OAAO,EAAEW,UAAnD;AAAA,kBACGb;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,aAAD;AAAe,QAAA,QAAQ;AAAvB;AAAA;AAAA;AAAA;AAAA,cAJF,eAQE,QAAC,aAAD;AAAA,+BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;IAxDqBF,S;;MAAAA,S","sourcesContent":["import React, { useEffect } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport {SERVER} from  \"./config\"\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: 500,\n      height: 450,\n    },\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)',\n    },\n  }));\n  \n  export function TitlebarGridList(props) {\n    const itemData = props.itemData\n    const {image, variety, plant, plant_id, user_id, for_sale} = props.plant\n\n    const classes = useStyles();\n  \n    return (\n      <div className={classes.root}>\n        <GridList cellHeight={300} className={classes.gridList} cols = {1}>\n          <GridListTile key=\"Subheader\" cols={1} style={{ height: 'auto' }}>\n        <ListSubheader component=\"div\">{variety} by {user_id}</ListSubheader>\n          </GridListTile>\n          {itemData.map((tile) => (\n            <GridListTile key={tile.post_id}>\n              <img src={tile.image} alt={tile.caption} />\n              <GridListTileBar\n                title={tile.stage}\n                //{<Typography variant=\"subtitle1\">{tile.stage}</Typography>}\n                subtitle = {tile.caption + \" - \" + tile.date_posted}\n                // {\n                //     <div>\n                //         <Typography variant=\"caption\" >{tile.caption}</Typography>\n                //         <Typography fontStyle=\"italic\"> {tile.date_posted}</Typography>\n                //     </div>\n                // }\n                actionIcon={\n                  <IconButton aria-label={`info about ${tile.caption}`} className={classes.icon}>\n                    <FavoriteIcon />\n                  </IconButton>\n                }\n              />\n            </GridListTile>\n          ))}\n        </GridList>\n      </div>\n    );\n  }\n\nconst styles = (theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n  \n  const DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  });\n  \n  const DialogContent = withStyles((theme) => ({\n    root: {\n      padding: theme.spacing(2),\n    },\n  }))(MuiDialogContent);\n  \n  const DialogActions = withStyles((theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(1),\n    },\n  }))(MuiDialogActions);\n  \nexport default function PinPlants(props) {\n    // const card = props.card\n    const {isOpen, pin_id, handleClose} = props\n    const [open, setOpen] = React.useState(false);\n    const [ itemData, setItemData ] = React.useState([]);\n\n    \n    const onFetchData = async e => {\n\n        // e.preventDefault();\n        try {\n        // const response = await fetch(`http://${SERVER}/posts/${plant_id}`)\n            // const jsonData = await response.json()\n            const jsonData = {\"a\":1}\n            console.log(jsonData)\n            setItemData(jsonData)\n        } catch (err) {\n            console.log(err.message)\n        }\n    }\n\n    useEffect(()=> {\n        if (isOpen){\n            setOpen(true)\n        } \n    }, [isOpen, pin_id])\n\n    // const handleClickOpen = () => {\n    //     onFetchData()\n    //     console.log(image, variety, plant, plant_id, user_id, for_sale)\n    //     setOpen(true);\n    // };\n\n\n    const handleExit = () => {\n      setOpen(false);\n      handleClose()\n      \n    };\n  \n    return (\n      <div>\n        <Dialog onClose={handleExit} aria-labelledby=\"customized-dialog-title\" open={open}>\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleExit}>\n            {pin_id}\n          </DialogTitle>\n          <DialogContent dividers>\n          {/* <TitlebarGridList itemData={itemData} plant ={props}/> */}\n                \n          </DialogContent>\n          <DialogActions>\n            <Button> Message Seller</Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }"]},"metadata":{},"sourceType":"module"}