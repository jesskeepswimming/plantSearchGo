[{"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\index.js":"1","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\App.js":"2","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\reportWebVitals.js":"3","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Album.js":"4","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Posts.js":"5","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Upload.js":"6","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\AddPost.js":"7","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\config.js":"8","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\index.js":"9","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\reportWebVitals.js":"10","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\App.js":"11","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\Album.js":"12","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\config.js":"13","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\PinPlants.js":"14","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\MyMap.js":"15","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\Upload.js":"16"},{"size":500,"mtime":1620354867255,"results":"17","hashOfConfig":"18"},{"size":498,"mtime":1620544793792,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1620354867255,"results":"20","hashOfConfig":"18"},{"size":9068,"mtime":1620545107717,"results":"21","hashOfConfig":"18"},{"size":5173,"mtime":1620545151108,"results":"22","hashOfConfig":"18"},{"size":12358,"mtime":1620545198877,"results":"23","hashOfConfig":"18"},{"size":10181,"mtime":1620544877155,"results":"24","hashOfConfig":"18"},{"size":352,"mtime":1620545061593,"results":"25","hashOfConfig":"18"},{"size":517,"mtime":1622412541971,"results":"26","hashOfConfig":"27"},{"size":375,"mtime":1622412541972,"results":"28","hashOfConfig":"27"},{"size":593,"mtime":1622536670345,"results":"29","hashOfConfig":"27"},{"size":9125,"mtime":1622536670344,"results":"30","hashOfConfig":"27"},{"size":381,"mtime":1622536670349,"results":"31","hashOfConfig":"27"},{"size":5352,"mtime":1622536670347,"results":"32","hashOfConfig":"27"},{"size":3565,"mtime":1622536670346,"results":"33","hashOfConfig":"27"},{"size":12596,"mtime":1622536670348,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wjcixs",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16jf6qp",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\index.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\App.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\reportWebVitals.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Album.js",["72","73","74","75","76","77","78","79","80","81","82"],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Posts.js",["83","84","85","86"],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Upload.js",["87","88","89","90","91","92","93","94","95","96"],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\AddPost.js",["97","98","99","100","101","102","103","104","105","106","107","108"],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\config.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\index.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\reportWebVitals.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\App.js",["109"],"import './App.css';\r\nimport Album from './Album';\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\";\r\nimport {firebaseConfig} from  \"./config\"\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nvar provider = new firebase.auth.GoogleAuthProvider();\r\nvar storage = firebase.storage();\r\n\r\nexport {storage, firebase}\r\n\r\nfunction App() {\r\n  const onStyleLoad = (ev) => {\r\n    console.log(ev)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n\r\n      </header>\r\n      <Album provider={provider}/>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\Album.js",["110","111","112","113","114","115","116","117"],"import React, {useState, useEffect} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport {firebase} from \"./App\";\r\nimport CustomizedDialogs from \"./Upload\"\r\nimport EcoIcon from '@material-ui/icons/Eco';\r\nimport {SERVER} from  \"./config\"\r\nimport ThreeDMap from './MyMap';\r\nimport PinPlants from './PinPlants'\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright Â© '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\n\r\nexport default function Album(props) {\r\n  const classes = useStyles();\r\n  const [cards, setCards] = useState([])\r\n  const [user, setUser] = useState(firebase.auth().currentUser)\r\n  const [reload, setReload] = useState(0)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [pinId, setPinId] = useState(undefined)\r\n  const [pinPlants, setPinPlants] = useState([]);\r\n  const [center, setCenter] = useState([-80.544861, 43.472286])\r\n  const [openCollection, setOpenCollection] = useState(false)\r\n  const [collectionPlants, setCollectionPlants] = useState([])\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n\r\n    \r\n  }, [reload]);\r\n\r\n\r\n  const triggerFetch = () => {\r\n    setReload(reload+1)\r\n  }\r\n  \r\n  const onPinClick = (pin_id) => {\r\n    console.log(pin_id)\r\n    getPlants(pin_id)\r\n    setPinId(pin_id)  \r\n    setIsOpen(true)\r\n      \r\n  }\r\n\r\n  const handleClose = () => {\r\n    console.log(\"close\")\r\n    setPinId(undefined)\r\n    setIsOpen(false)\r\n  }\r\n\r\n  const handleCloseCollection = () => {\r\n    console.log(\"close\")\r\n    setOpenCollection(false)\r\n  }\r\n\r\n\r\n\r\n  async function onDeleteData(plant_id) {\r\n    console.log(\"deleting\", plant_id)\r\n    // e.preventDefault();\r\n    try {\r\n      const response = await fetch(`https://${SERVER}/users/${plant_id}`,{\r\n        method: \"DELETE\",\r\n        headers: {\"Content-Type\": \"application/json\"},\r\n      })\r\n\r\n      const jsonData = await response.json()\r\n      console.log(jsonData)\r\n      setReload(reload+1)\r\n    } catch (err) {\r\n      console.log(err.message)\r\n    }\r\n  }\r\n\r\n  const handleCenterChange = (c) => {\r\n    setCenter(c)\r\n  }\r\n\r\n  \r\n  const getPlants = async (pin_id) => {\r\n\r\n    try {\r\n      const response = await fetch(`https://${SERVER}/pins/${pin_id}/plants`)\r\n      const jsonData = await response.json()\r\n      console.log(jsonData)\r\n      setPinPlants(jsonData)\r\n    \r\n    } catch (err) {\r\n      console.log(err.message)\r\n    }\r\n  \r\n  }\r\n\r\n  const getUserPlants = async () => {\r\n\r\n    try {\r\n      const response = await fetch(`https://${SERVER}/users/${user.email}/plants`)\r\n      const jsonData = await response.json()\r\n      console.log(jsonData)\r\n      setCollectionPlants(jsonData)\r\n    \r\n    } catch (err) {\r\n      console.log(err.message)\r\n    }\r\n  \r\n  }\r\n\r\n  const createAccount = async (email, username) => {\r\n\r\n    try {\r\n        const body = {\r\n            email:email,  \r\n            username: username\r\n        }\r\n\r\n        const response = await fetch( `https://${SERVER}/users/new`, {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(body)\r\n        });\r\n        console.log(response)\r\n\r\n    } catch (err){\r\n        console.log(err)\r\n    }\r\n  }\r\n\r\n  const handleOpenCollection = () => {\r\n    getUserPlants()\r\n    setOpenCollection(true)\r\n  }  \r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <EcoIcon className={classes.icon} />\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n          PlantSearchGo!\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        {/* Hero unit */}\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            {/* <Typography component=\"h1\" variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              PlantSearchGo!\r\n            </Typography> */}\r\n            <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\r\n              Document and collect nearby plants!\r\n            </Typography>\r\n            <div className={classes.heroButtons}>\r\n              <Grid container spacing={2} justify=\"center\">\r\n                <Grid item>\r\n                  {user && !user.isAnonymous ?\r\n                     <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                      firebase.auth().signOut().then(() => {\r\n                          // Sign-out successful.\r\n\r\n                          console.log(\"sign out successful\")\r\n                          setUser(null)\r\n                          setReload(reload+1)\r\n                        }).catch((error) => {\r\n                          // An error happened.\r\n                          console.log(\"error with sign out\")\r\n                         \r\n                        });\r\n                     }}> \r\n                     Sign Out\r\n                     </Button>\r\n                    :\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                     firebase.auth()\r\n                     .signInWithPopup(props.provider)\r\n                     .then((result) => {\r\n                       /** @type {firebase.auth.OAuthCredential} */\r\n                       var credential = result.credential;\r\n                      \r\n                       // This gives you a Google Access Token. You can use it to access the Google API.\r\n                       var token = credential.accessToken;\r\n                       // The signed-in user info.\r\n                       var user = result.user;\r\n                       setUser(user)\r\n                       console.log(user)\r\n                       createAccount(user.email, user.displayName)\r\n                       // ...\r\n                     }).catch((error) => {\r\n                       // Handle Errors here.\r\n                       var errorCode = error.code;\r\n                       var errorMessage = error.message;\r\n                       // The email of the user's account used.\r\n                       var email = error.email;\r\n                       // The firebase.auth.AuthCredential type that was used.\r\n                       var credential = error.credential;\r\n                       // ...\r\n                     });\r\n                  }}>\r\n                    Sign In\r\n                  </Button>\r\n                  \r\n                }\r\n                \r\n                </Grid>\r\n               \r\n                <Grid item>\r\n          \r\n                  <CustomizedDialogs user={user} reloadFunction={triggerFetch} setUserFunction={setUser} center={center}/>\r\n                  \r\n                </Grid>\r\n                <Grid item> \r\n                <Button variant=\"outlined\" color=\"primary\" disabled={!user} onClick={handleOpenCollection}>\r\n                  My Collection\r\n                </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n\r\n        <ThreeDMap onPinClick={onPinClick} center={center} handleCenterChange={handleCenterChange} reload={reload}/>\r\n        <PinPlants isOpen={isOpen} pin_id={pinId} handleClose={handleClose} pinPlants={pinPlants}/>\r\n\r\n        <PinPlants isOpen={openCollection} pin_id={user? user.displayName: \"\"} handleClose={handleCloseCollection} pinPlants={collectionPlants}/>\r\n\r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n       \r\n        </Container>\r\n      </main>\r\n      {/* Footer */}\r\n      <footer className={classes.footer}>\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Footer\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n          Something here to give the footer a purpose!\r\n        </Typography>\r\n        <Copyright />\r\n      </footer>\r\n      {/* End footer */}\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\config.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\PinPlants.js",["118"],"import React, { useEffect } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n      width: 500,\r\n      height: 450,\r\n    },\r\n    icon: {\r\n      color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n  }));\r\n  \r\n  export function TitlebarGridList(props) {\r\n    const {itemData} = props\r\n\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <GridList cellHeight={300} className={classes.gridList} cols = {1}>\r\n          <GridListTile key=\"Subheader\" cols={1} style={{ height: 'auto' }}>\r\n          </GridListTile>\r\n          {itemData.map((tile) => (\r\n            <GridListTile key={tile.plant_id}>\r\n              <img src={tile.image} alt={tile.plant_details} />\r\n              <GridListTileBar\r\n                title={tile.plant_name + ', ' + tile.plant_scientific_name}\r\n                // <Typography> variant=\"subtitle1\">{tile.scientific_name}</Typography>\r\n                subtitle = {tile.date_posted + \",\" + tile.user_id}\r\n                // {\r\n                //     <div>\r\n                //         <Typography variant=\"caption\" >{tile.caption}</Typography>\r\n                //         <Typography fontStyle=\"italic\"> {tile.date_posted}</Typography>\r\n                //     </div>\r\n                // }\r\n                actionIcon={\r\n                  <IconButton aria-label={`info about ${tile.plant_id}`} className={classes.icon}>\r\n                    <FavoriteIcon />\r\n                  </IconButton>\r\n                }\r\n              />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n      </div>\r\n    );\r\n  }\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n  \r\n  const DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        <Typography variant=\"h6\">{children}</Typography>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n  });\r\n  \r\n  const DialogContent = withStyles((theme) => ({\r\n    root: {\r\n      padding: theme.spacing(2),\r\n    },\r\n  }))(MuiDialogContent);\r\n  \r\n  const DialogActions = withStyles((theme) => ({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(1),\r\n    },\r\n  }))(MuiDialogActions);\r\n  \r\nexport default function PinPlants(props) {\r\n    // const card = props.card\r\n    const {isOpen, pin_id, handleClose, pinPlants} = props\r\n    const [open, setOpen] = React.useState(false);\r\n    const [ itemData, setItemData ] = React.useState([]);\r\n\r\n    \r\n    // const onFetchData = async (pin_id) => {\r\n\r\n    //     // e.preventDefault();\r\n    //     try {\r\n    //     // const response = await fetch(`http://${SERVER}/posts/${plant_id}`)\r\n    //         // const jsonData = await response.json()\r\n    //         const jsonData = []\r\n    //         console.log(jsonData)\r\n    //         setItemData(jsonData)\r\n    //     } catch (err) {\r\n    //         console.log(err.message)\r\n    //     }\r\n    // }\r\n\r\n    useEffect(()=> {\r\n        if (isOpen){\r\n            setOpen(true)\r\n        } \r\n    }, [isOpen])\r\n\r\n    // const handleClickOpen = () => {\r\n    //     onFetchData()\r\n    //     console.log(image, variety, plant, plant_id, user_id, for_sale)\r\n    //     setOpen(true);\r\n    // };\r\n\r\n\r\n    const handleExit = () => {\r\n      setOpen(false);\r\n      setItemData([])\r\n      handleClose()\r\n      \r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Dialog onClose={handleExit} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleExit}>\r\n            {pin_id}\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n          {pinPlants ? <TitlebarGridList itemData={pinPlants}/> : ''}\r\n                \r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n                onClick={()=> console.log('add plant to this pin')} // to do\r\n            > Add photo</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\MyMap.js",["119","120","121","122","123","124"],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactMapboxGl, {Layer, Feature} from \"react-mapbox-gl\";\r\nimport {SERVER} from  \"./config\"\r\n\r\nconst { token } = require('./config.json');\r\n\r\nconst Map = ReactMapboxGl({ accessToken: token });\r\n\r\nconst mapStyle = {\r\n  flex: 1,\r\n  height: 500\r\n};\r\n\r\nconst paintLayer = {\r\n  'fill-extrusion-color': '#aaa',\r\n  'fill-extrusion-height': {\r\n    type: 'identity',\r\n    property: 'height'\r\n  },\r\n  'fill-extrusion-base': {\r\n    type: 'identity',\r\n    property: 'min_height'\r\n  },\r\n  'fill-extrusion-opacity': 0.6\r\n};\r\n\r\n\r\n\r\nfunction ThreeDMap(props) {\r\n\r\n  const {onPinClick, center, handleCenterChange, reload} = props\r\n  const [lastFetchCenter, setLastFetchCenter] = useState([-80.544861, 43.472286]);\r\n  const [zoom, setZoom] = useState([50]);\r\n  const [bearing, setBearing] = useState([-60]);\r\n  const [pitch, setPitch] = useState([80]);\r\n  const [stations, setStations] = useState([]);\r\n\r\n\r\n  const radians = (degree) => {\r\n    return degree* Math.PI / 180\r\n  }\r\n\r\n  const kmDiff= (lon1, lat1, lon2  = lastFetchCenter[0], lat2= lastFetchCenter[1])=> {\r\n    var dlon = radians(lon2) - radians(lon1)\r\n    var dlat = radians(lat2) - radians(lat1)\r\n    var a = Math.pow((Math.sin(dlat/2)), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow((Math.sin(dlon/2)),2)\r\n    var c = 2 * Math.atan2( Math.sqrt(a), Math.sqrt(1-a) )\r\n    return 6373.0 * c //(where R is the radius of the Earth)\r\n  } \r\n\r\n  const getStations = async (long, lat) => {\r\n    setLastFetchCenter([long, lat])\r\n\r\n    try {\r\n      const vicinity = 1000\r\n      const response = await fetch(`https://${SERVER}/pins/vicinity/${long}/${lat}/${vicinity}`)\r\n      const jsonData = await response.json()\r\n      console.log(jsonData)\r\n      setStations(jsonData)\r\n      \r\n    } catch (err) {\r\n      console.log(err.message)\r\n    }\r\n  \r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (reload>0) getStations(center[0], center[1])\r\n    console.log(reload)\r\n  }, [reload])\r\n  \r\n  useEffect(()=> {\r\n    var diff = kmDiff(center[0], center[1])\r\n    console.log(diff, center)\r\n    if (diff>1) {\r\n      getStations(center[0], center[1])\r\n    }\r\n  }, [center]);\r\n\r\n   \r\n    const onStyleLoad = (map, loadEvent) => {\r\n       getStations(-80.544861, 43.472286)\r\n    };\r\n\r\n    return (\r\n      <Map\r\n        style=\"mapbox://styles/mapbox/streets-v8\"\r\n        containerStyle={mapStyle}\r\n        onStyleLoad={onStyleLoad}\r\n        zoom={zoom}\r\n        center={center}\r\n        pitch={pitch}\r\n        bearing={bearing}\r\n        renderChildrenInPortal={true}\r\n        onMoveEnd= {(_, event) => {\r\n          \r\n          var newCenter =  event.target.transform._center;\r\n          // setCenter([newCenter.lng, newCenter.lat])\r\n          handleCenterChange([newCenter.lng, newCenter.lat])\r\n          \r\n        }}\r\n      >\r\n          <Layer type='circle'  paint={{'circle-color': 'red', 'circle-radius': 10}}>\r\n              {stations.map((item) => {\r\n                  return <Feature\r\n                    key = {item.pin_id}\r\n                    onClick={() => onPinClick(item.pin_id)}\r\n                    coordinates = {[item.longitude, item.latitude]}\r\n                  />\r\n            })}\r\n          </Layer>\r\n\r\n      \r\n        <Layer\r\n          id=\"3d-buildings\"\r\n          sourceId=\"composite\"\r\n          sourceLayer=\"building\"\r\n          filter={['==', 'extrude', 'true']}\r\n          type=\"fill-extrusion\"\r\n          minZoom={14}\r\n          paint={paintLayer}\r\n        >\r\n          \r\n        </Layer>\r\n      \r\n      \r\n     </Map>\r\n        \r\n    );\r\n\r\n}\r\n\r\nexport default ThreeDMap;","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plantSearchGo\\client\\src\\Upload.js",["125","126","127","128","129","130"],"import React, {useState, useEffect}from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport {SERVER} from  \"./config\"\r\n\r\nimport {storage, firebase} from './App'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  actionsContainer: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  resetContainer: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport function VerticalLinearStepper(props) {\r\n\r\n  const {handleClose, user, setUserFunction, reloadFunction, center} = props\r\n  const classes = useStyles();\r\n\r\n  // const [currentUser, setCurrentUser] = useState(props.user)\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [imageAsFile, setImageAsFile] = useState('')\r\n  const [imageAsUrl, setImageAsUrl] = useState('')\r\n\r\n  const [note, setNote] = useState(\"\")\r\n  const [uploadStatus, setUploadStatus] = useState(\"\")\r\n  const [identification, setIdentification] = useState({})\r\n\r\n\r\n\r\n  const storageRef = storage.ref();\r\n\r\n\r\n  const handleImageAsFile = (e) => {\r\n    const image = e.target.files[0]\r\n    setImageAsFile(imageAsFile => (image))\r\n  }\r\n\r\n\r\n  const imageFileType = (name) => {\r\n    if (name.endsWith(\".jpg\") || name.endsWith(\".jpeg\") || name.endsWith(\".png\")) return true\r\n\r\n    return false\r\n  }\r\n\r\n  const handleFireBaseUpload = (user = props.user) => {\r\n    // e.preventDefault()\r\n    console.log('start of upload')\r\n    // async magic goes here...\r\n\r\n    if(imageAsFile === '' || !imageFileType(imageAsFile.name) ) {\r\n        let errorMsg = `file must be a jpeg/png image`\r\n        setUploadStatus(\"error: \" +errorMsg)\r\n    } else{\r\n        var current = new Date().valueOf();\r\n        const url = `/images/${current}${imageAsFile.name}`\r\n        const imageRef = storageRef.child(url)\r\n\r\n        var uploadTask = imageRef.put(imageAsFile)\r\n\r\n        uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n            // Observe state change events such as progress, pause, and resume\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            setUploadStatus(progress + '%')\r\n            console.log('Upload is ' + progress + '% done');\r\n            switch (snapshot.state) {\r\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                console.log('Upload is paused');\r\n                break;\r\n                case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                console.log('Upload is running');\r\n                break;\r\n            }\r\n            }, \r\n            (error) => {\r\n            // Handle unsuccessful uploads\r\n                console.log(\"error\")\r\n                setUploadStatus(\"error\")\r\n\r\n            }, \r\n            () => {\r\n                // Handle successful uploads on complete\r\n                // For instance, get the download URL: https://firebasestorage.googleapis.com/...\r\n                uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n                  console.log('File available at', downloadURL);\r\n                  setImageAsUrl(downloadURL)\r\n                  onPostData(downloadURL, user)\r\n                  setUploadStatus(\"success\")\r\n                });\r\n              }\r\n        ); \r\n  \r\n    }\r\n  \r\n  }\r\n\r\n  const handleUpload = () => {\r\n    // upload to backend\r\n    // setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    onUploadData()\r\n    \r\n  };\r\n\r\n \r\n  const onPostData = (downloadURL, user) => {\r\n\r\n    try {\r\n\r\n        const body = {\r\n            'imageUrl': downloadURL,\r\n            'latitude': 0,\r\n            'longitude': 0,\r\n        }\r\n\r\n        console.log(body)\r\n\r\n        const response =  fetch(`https://${SERVER}/plants/identify`, {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(body)\r\n        }).then(function(response) {\r\n          // The response is a Response instance.\r\n          // You parse the data into a useable format using `.json()`\r\n          return response.json();\r\n        }).then(function(data) {\r\n          // `data` is the parsed version of the JSON returned from the above endpoint.\r\n          console.log(data);  // { \"userId\": 1, \"id\": 1, \"title\": \"...\", \"body\": \"...\" }\r\n\r\n          const {plant_name, plant_details} = data\r\n          const {common_names} = plant_details\r\n\r\n          const result = {\r\n            plant_name,\r\n            \"common_name\": common_names[0],\r\n            \"wiki_images\": plant_details.wiki_images\r\n          }\r\n\r\n\r\n          setIdentification(result)\r\n          setActiveStep(1);\r\n\r\n        });\r\n\r\n        \r\n      } catch (err){\r\n        console.log(err)\r\n    }\r\n    \r\n  }\r\n\r\n\r\n// Retrieve its body as ReadableStream\r\n\r\n  const onUploadData = async (user) => {\r\n\r\n    try {\r\n        console.log(user, props.user)\r\n        const body = {\r\n            'plant_name' : identification.plant_name,\r\n            'common_name': identification.common_name,\r\n            'plant_details': note,\r\n            'user': props.user.email,\r\n            'image': imageAsUrl,\r\n            'latitude': center[1],\r\n            'longitude':center[0]\r\n        }\r\n\r\n        console.log(body)\r\n        const response = await fetch(`https://${SERVER}/pins/upload`, {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(body)\r\n        });\r\n        console.log(response)\r\n\r\n        handleClose()\r\n        reloadFunction()\r\n\r\n    } catch (err){\r\n        console.log(err)\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    setOpen(true)\r\n\r\n    // check if signed in, if not, vreate anonymous session\r\n    handleFireBaseUpload()\r\n   \r\n    // props.handleClose();\r\n\r\n  };\r\n\r\n\r\n\r\n  const steps = ['Identify Plant', 'Upload plant to your location'];\r\n\r\n  const getStepContent = (step) => {\r\n    switch (step) {\r\n      \r\n      case 0:\r\n        return <form>\r\n           \r\n            <input\r\n                type=\"file\"\r\n                onChange={handleImageAsFile}\r\n                // hidden\r\n            />\r\n          \r\n            <div>\r\n                <TextField id=\"standard-required\" label=\"Caption\" defaultValue={\"\"} onChange={e => setNote(e.target.value)} />\r\n            </div>\r\n\r\n\r\n        </form>;\r\n      case 1:\r\n        return <div>\r\n               \r\n                  <div className={classes.root}>\r\n                  <GridList cellHeight={300} className={classes.gridList} cols = {1}>\r\n                    <GridListTile key=\"Subheader\" cols={1} style={{ height: 'auto' }}>\r\n                    <ListSubheader component=\"div\">{identification.common_name} ({identification.plant_name})</ListSubheader>\r\n                    <ListSubheader component=\"div\">Similar Images</ListSubheader>\r\n\r\n                    </GridListTile>\r\n                    {identification.wiki_images ? identification.wiki_images.map((tile, i) => (\r\n                      <GridListTile key={i}>\r\n                        <img src={tile.value} alt={tile.citation} />\r\n                        <GridListTileBar\r\n                          subtitle = {tile.citation}\r\n                          // actionIcon={\r\n                            \r\n                          // }\r\n                        />\r\n                      </GridListTile>\r\n                    )): \"\"}\r\n                  </GridList>\r\n                </div>\r\n\r\n            </div>\r\n      default:\r\n        return 'Unknown step';\r\n    }\r\n  }\r\n  \r\n  const [open, setOpen] = useState(false)\r\n\r\n  const handleCloseHere = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    if (uploadStatus == \"success\") {\r\n      // props.handleClose()\r\n      // props.reloadFunction();\r\n    }\r\n    \r\n  }, [uploadStatus]);\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    \r\n    \r\n  }, [identification]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n        {steps.map((label, index) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n            <StepContent>\r\n              <Typography>{getStepContent(index)}</Typography>\r\n              <div className={classes.actionsContainer}>\r\n                <div>\r\n                 \r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={activeStep === steps.length - 1 ? handleUpload : handleSubmit}\r\n                    className={classes.button}\r\n                    // disabled={uploadStatus != \"\"}\r\n                  >\r\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </StepContent>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      <Snackbar open={open} \r\n       message={uploadStatus}\r\n       action={\r\n         <React.Fragment>\r\n           <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleCloseHere}>\r\n             <CloseIcon fontSize=\"small\" />\r\n           </IconButton>\r\n         </React.Fragment>\r\n       }>\r\n       \r\n      </Snackbar>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n  \r\n  const DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        <Typography variant=\"h6\">{children}</Typography>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n  });\r\n  \r\n  const DialogContent = withStyles((theme) => ({\r\n    root: {\r\n      padding: theme.spacing(2),\r\n    },\r\n  }))(MuiDialogContent);\r\n  \r\n  const DialogActions = withStyles((theme) => ({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(1),\r\n    },\r\n  }))(MuiDialogActions);\r\n  \r\nexport default function CustomizedDialogs(props) {\r\n    const {user, center} = props \r\n  \r\n    const [open, setOpen] = React.useState(false);\r\n  \r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Button variant=\"outlined\" color=\"primary\" disabled={!props.user} onClick={handleClickOpen}>\r\n          Upload Plant \r\n        </Button>\r\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n            New Plant Profile\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            <VerticalLinearStepper handleClose= {handleClose} user={user} setUserFunction={props.setUserFunction} reloadFunction={props.reloadFunction} center={center}/>\r\n          </DialogContent>\r\n          {/* <DialogActions>\r\n         \r\n          </DialogActions> */}\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n  ",{"ruleId":"131","severity":1,"message":"132","line":19,"column":8,"nodeType":"133","messageId":"134","endLine":19,"endColumn":15},{"ruleId":"131","severity":1,"message":"135","line":168,"column":28,"nodeType":"133","messageId":"134","endLine":168,"endColumn":33},{"ruleId":"131","severity":1,"message":"136","line":175,"column":28,"nodeType":"133","messageId":"134","endLine":175,"endColumn":37},{"ruleId":"131","severity":1,"message":"137","line":176,"column":28,"nodeType":"133","messageId":"134","endLine":176,"endColumn":40},{"ruleId":"131","severity":1,"message":"138","line":178,"column":28,"nodeType":"133","messageId":"134","endLine":178,"endColumn":33},{"ruleId":"131","severity":1,"message":"139","line":180,"column":28,"nodeType":"133","messageId":"134","endLine":180,"endColumn":38},{"ruleId":"140","severity":1,"message":"141","line":216,"column":51,"nodeType":"142","messageId":"143","endLine":216,"endColumn":53},{"ruleId":"140","severity":1,"message":"141","line":223,"column":92,"nodeType":"142","messageId":"143","endLine":223,"endColumn":94},{"ruleId":"140","severity":1,"message":"141","line":224,"column":48,"nodeType":"142","messageId":"143","endLine":224,"endColumn":50},{"ruleId":"140","severity":1,"message":"141","line":227,"column":92,"nodeType":"142","messageId":"143","endLine":227,"endColumn":94},{"ruleId":"140","severity":1,"message":"141","line":228,"column":46,"nodeType":"142","messageId":"143","endLine":228,"endColumn":48},{"ruleId":"131","severity":1,"message":"144","line":38,"column":12,"nodeType":"133","messageId":"134","endLine":38,"endColumn":17},{"ruleId":"131","severity":1,"message":"145","line":38,"column":28,"nodeType":"133","messageId":"134","endLine":38,"endColumn":33},{"ruleId":"131","severity":1,"message":"146","line":38,"column":35,"nodeType":"133","messageId":"134","endLine":38,"endColumn":43},{"ruleId":"131","severity":1,"message":"147","line":38,"column":54,"nodeType":"133","messageId":"134","endLine":38,"endColumn":62},{"ruleId":"131","severity":1,"message":"148","line":22,"column":8,"nodeType":"133","messageId":"134","endLine":22,"endColumn":22},{"ruleId":"131","severity":1,"message":"149","line":62,"column":10,"nodeType":"133","messageId":"134","endLine":62,"endColumn":20},{"ruleId":"150","severity":1,"message":"151","line":107,"column":13,"nodeType":"152","messageId":"153","endLine":114,"endColumn":14},{"ruleId":"131","severity":1,"message":"154","line":143,"column":9,"nodeType":"133","messageId":"134","endLine":143,"endColumn":19},{"ruleId":"131","severity":1,"message":"136","line":197,"column":13,"nodeType":"133","messageId":"134","endLine":197,"endColumn":22},{"ruleId":"131","severity":1,"message":"137","line":198,"column":13,"nodeType":"133","messageId":"134","endLine":198,"endColumn":25},{"ruleId":"140","severity":1,"message":"155","line":293,"column":22,"nodeType":"142","messageId":"143","endLine":293,"endColumn":24},{"ruleId":"156","severity":1,"message":"157","line":298,"column":6,"nodeType":"158","endLine":298,"endColumn":20,"suggestions":"159"},{"ruleId":"140","severity":1,"message":"141","line":316,"column":44,"nodeType":"142","messageId":"143","endLine":316,"endColumn":46},{"ruleId":"131","severity":1,"message":"160","line":375,"column":9,"nodeType":"133","messageId":"134","endLine":375,"endColumn":22},{"ruleId":"131","severity":1,"message":"161","line":18,"column":8,"nodeType":"133","messageId":"134","endLine":18,"endColumn":24},{"ruleId":"131","severity":1,"message":"162","line":19,"column":8,"nodeType":"133","messageId":"134","endLine":19,"endColumn":16},{"ruleId":"131","severity":1,"message":"148","line":22,"column":8,"nodeType":"133","messageId":"134","endLine":22,"endColumn":22},{"ruleId":"131","severity":1,"message":"163","line":51,"column":9,"nodeType":"133","messageId":"134","endLine":51,"endColumn":13},{"ruleId":"131","severity":1,"message":"149","line":55,"column":10,"nodeType":"133","messageId":"134","endLine":55,"endColumn":20},{"ruleId":"150","severity":1,"message":"151","line":98,"column":13,"nodeType":"152","messageId":"153","endLine":105,"endColumn":14},{"ruleId":"131","severity":1,"message":"154","line":136,"column":9,"nodeType":"133","messageId":"134","endLine":136,"endColumn":19},{"ruleId":"131","severity":1,"message":"164","line":165,"column":11,"nodeType":"133","messageId":"134","endLine":165,"endColumn":18},{"ruleId":"140","severity":1,"message":"155","line":226,"column":22,"nodeType":"142","messageId":"143","endLine":226,"endColumn":24},{"ruleId":"156","severity":1,"message":"157","line":231,"column":6,"nodeType":"158","endLine":231,"endColumn":20,"suggestions":"165"},{"ruleId":"140","severity":1,"message":"141","line":251,"column":44,"nodeType":"142","messageId":"143","endLine":251,"endColumn":46},{"ruleId":"131","severity":1,"message":"160","line":310,"column":9,"nodeType":"133","messageId":"134","endLine":310,"endColumn":22},{"ruleId":"131","severity":1,"message":"166","line":16,"column":9,"nodeType":"133","messageId":"134","endLine":16,"endColumn":20},{"ruleId":"131","severity":1,"message":"167","line":66,"column":10,"nodeType":"133","messageId":"134","endLine":66,"endColumn":15},{"ruleId":"131","severity":1,"message":"168","line":66,"column":17,"nodeType":"133","messageId":"134","endLine":66,"endColumn":25},{"ruleId":"131","severity":1,"message":"169","line":108,"column":18,"nodeType":"133","messageId":"134","endLine":108,"endColumn":30},{"ruleId":"131","severity":1,"message":"135","line":233,"column":28,"nodeType":"133","messageId":"134","endLine":233,"endColumn":33},{"ruleId":"131","severity":1,"message":"136","line":242,"column":28,"nodeType":"133","messageId":"134","endLine":242,"endColumn":37},{"ruleId":"131","severity":1,"message":"137","line":243,"column":28,"nodeType":"133","messageId":"134","endLine":243,"endColumn":40},{"ruleId":"131","severity":1,"message":"138","line":245,"column":28,"nodeType":"133","messageId":"134","endLine":245,"endColumn":33},{"ruleId":"131","severity":1,"message":"139","line":247,"column":28,"nodeType":"133","messageId":"134","endLine":247,"endColumn":38},{"ruleId":"131","severity":1,"message":"170","line":114,"column":13,"nodeType":"133","messageId":"134","endLine":114,"endColumn":21},{"ruleId":"131","severity":1,"message":"171","line":34,"column":16,"nodeType":"133","messageId":"134","endLine":34,"endColumn":23},{"ruleId":"131","severity":1,"message":"172","line":35,"column":19,"nodeType":"133","messageId":"134","endLine":35,"endColumn":29},{"ruleId":"131","severity":1,"message":"173","line":36,"column":17,"nodeType":"133","messageId":"134","endLine":36,"endColumn":25},{"ruleId":"156","severity":1,"message":"174","line":71,"column":6,"nodeType":"158","endLine":71,"endColumn":14,"suggestions":"175"},{"ruleId":"156","severity":1,"message":"176","line":79,"column":6,"nodeType":"158","endLine":79,"endColumn":14,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":88,"column":9,"nodeType":"180","messageId":"181","endLine":88,"endColumn":50},{"ruleId":"131","severity":1,"message":"163","line":47,"column":23,"nodeType":"133","messageId":"134","endLine":47,"endColumn":27},{"ruleId":"131","severity":1,"message":"182","line":47,"column":29,"nodeType":"133","messageId":"134","endLine":47,"endColumn":44},{"ruleId":"150","severity":1,"message":"151","line":98,"column":13,"nodeType":"152","messageId":"153","endLine":105,"endColumn":14},{"ruleId":"131","severity":1,"message":"183","line":149,"column":15,"nodeType":"133","messageId":"134","endLine":149,"endColumn":23},{"ruleId":"140","severity":1,"message":"155","line":290,"column":22,"nodeType":"142","messageId":"143","endLine":290,"endColumn":24},{"ruleId":"131","severity":1,"message":"160","line":378,"column":9,"nodeType":"133","messageId":"134","endLine":378,"endColumn":22},"no-unused-vars","'AddIcon' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'image' is assigned a value but never used.","'plant' is assigned a value but never used.","'plant_id' is assigned a value but never used.","'for_sale' is assigned a value but never used.","'FormHelperText' is defined but never used.","'imageAsUrl' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'handleBack' is assigned a value but never used.","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["184"],"'DialogActions' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'user' is assigned a value but never used.","'success' is assigned a value but never used.",["185"],"'onStyleLoad' is assigned a value but never used.","'cards' is assigned a value but never used.","'setCards' is assigned a value but never used.","'onDeleteData' is defined but never used.","'itemData' is assigned a value but never used.","'setZoom' is assigned a value but never used.","'setBearing' is assigned a value but never used.","'setPitch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'center'. Either include it or remove the dependency array.",["186"],"React Hook useEffect has a missing dependency: 'kmDiff'. Either include it or remove the dependency array.",["187"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","stylePropNotObject","'setUserFunction' is assigned a value but never used.","'response' is assigned a value but never used.",{"desc":"188","fix":"189"},{"desc":"188","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [props, uploadStatus]",{"range":"195","text":"196"},{"range":"197","text":"196"},"Update the dependencies array to be: [center, reload]",{"range":"198","text":"199"},"Update the dependencies array to be: [center, kmDiff]",{"range":"200","text":"201"},[9099,9113],"[props, uploadStatus]",[6980,6994],[1954,1962],"[center, reload]",[2137,2145],"[center, kmDiff]"]